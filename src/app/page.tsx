"use client";

import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase";
import { Button } from "@/components/ui/button";
import { Plus, Minus } from "lucide-react";
import { BossSelectMenu } from "@/components/bossSelectMenu/BossSelectMenu";
import { Boss, DeathCounter, type NewBoss } from '@/types/boss'

export default function Home() {
  const [bosses, setBosses] = useState<Boss[]>([]);
  const [selectedBoss, setSelectedBoss] = useState<Boss | null>(null);
  const [deathCounter, setDeathCounter] = useState<DeathCounter | null>(null);
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);
  const [isAudioEnable, setIsAudioEnable] = useState(false);
  
  // –°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
  const audioTracks = [
    "/audio/gimn.mp3",
    "/audio/track1.mp3",
    "/audio/track2.mp3",
    "/audio/track3.mp3",
    "/audio/track4.mp3",
    "/audio/track5.mp3",
    "/audio/track6.mp3",
    "/audio/track7.mp3",
    "/audio/track8.mp3"
  ];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
  const playRandomTrack = () => {
    if (!isAudioEnable) {
      return;
    }
    
    stopCurrentTrack(); // –û—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    
    const randomIndex = Math.floor(Math.random() * audioTracks.length);
    const audio = new Audio(audioTracks[randomIndex]);
    setCurrentAudio(audio); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞—É–¥–∏–æ
    audio.play();
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  const stopCurrentTrack = () => {
    if (currentAudio) {
      currentAudio.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      currentAudio.currentTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫ –Ω–∞ –Ω–∞—á–∞–ª–æ
      setCurrentAudio(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–±–µ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
  const playWinTrack = () => {
    if (!isAudioEnable) {
      return;
    }
    
    stopCurrentTrack()
    const audio = new Audio(audioTracks[0]);
    setCurrentAudio(audio);
    audio.play();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏
  /// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedAudioState = localStorage.getItem("isAudioEnable");
    if (savedAudioState !== null) {
      setIsAudioEnable(JSON.parse(savedAudioState));
    }
  }, []);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem("isAudioEnable", JSON.stringify(isAudioEnable));
  }, [isAudioEnable]);
  
  
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏
  const toggleMusicState = () => {
    setIsAudioEnable(!isAudioEnable);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Å—Å–æ–≤ –∏–∑ Supabase
  useEffect(() => {
    const fetchBosses = async () => {
      const { data, error } = await supabase.from("bosses").select("*");
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Å—Å–æ–≤:", error.message);
      } else {
        setBosses(data || []);
      }
    };
    
    fetchBosses();
  }, []);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö death_counters –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Å—Å–∞
  useEffect(() => {
    if (!selectedBoss) return;
    
    const fetchDeathCounter = async () => {
      const { data, error } = await supabase
        .from("death_counters")
        .select("*")
        .eq("boss_id", selectedBoss.id)
        .single();
      
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π:", error.message);
        setDeathCounter(null);
      } else {
        setDeathCounter(data);
      }
    };
    
    fetchDeathCounter();
    
    const channel = supabase
      .channel("death_counters_changes")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "death_counters", filter: `boss_id=eq.${selectedBoss.id}` },
        (payload) => {
          console.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:", payload);
          setDeathCounter(payload.new as DeathCounter);
        }
      )
      .subscribe();
    
    return () => {
      supabase.removeChannel(channel);
    };
  }, [selectedBoss]);
  
  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π
  const incrementDeathCount = async () => {
    if (deathCounter) {
      const { data, error } = await supabase
        .from("death_counters")
        .update({ death_count: deathCounter.death_count + 1 })
        .eq("id", deathCounter.id)
        .select()
        .single();
      
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π:", error.message);
      } else {
        playRandomTrack();
        setDeathCounter(data);
      }
    }
  };
  
  // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π
  const decrementDeathCount = async () => {
    if (deathCounter && deathCounter.death_count > 0) {
      const { data, error } = await supabase
        .from("death_counters")
        .update({ death_count: deathCounter.death_count - 1 })
        .eq("id", deathCounter.id)
        .select()
        .single();
      
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π:", error.message);
      } else {
        setDeathCounter(data);
      }
    }
  };
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Å—Å–∞
  const addBoss = async (newBoss: NewBoss) => {
    const { data: bossData, error: bossError } = await supabase
      .from("bosses")
      .insert(newBoss)
      .select()
      .single();
    
    if (bossError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞:", bossError.message);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ death_counters –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Å—Å–∞
    const { error: counterError } = await supabase.from("death_counters").insert({
      boss_id: bossData.id,
      death_count: 0,
    });
    
    if (counterError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π:", counterError.message);
    } else {
      setBosses((prev) => [...prev, bossData]);
    }
  };
  
  // –í—ã–±–æ—Ä –±–æ—Å—Å–∞
  const selectBoss = (bossId: number) => {
    const boss = bosses.find((b) => b.id === bossId) || null;
    setSelectedBoss(boss);
  };
  
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 gap-16 font-[family-name:var(--font-geist-sans)]">
      <header className="flex flex-row w-full justify-center">
        <h1 className="text-4xl">Elden Ring –ö–ª–∏–∫–µ—Ä</h1>
      </header>
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <div className="flex justify-center w-full">
          <BossSelectMenu bosses={bosses} onAddBoss={addBoss} onSelectBoss={selectBoss} />
        </div>
        {selectedBoss ? (
          <div className="flex flex-col items-center gap-4">
            <h2 className="text-2xl">{selectedBoss.name}</h2>
            <p>{selectedBoss.description ?? ""}</p>
            <div className="flex flex-row justify-center items-center gap-x-8">
              <Button size="icon" className="px-9 py-8" onClick={decrementDeathCount}>
                <Minus size={72} />
              </Button>
              <h2 className="text-8xl">{deathCounter?.death_count || 0}</h2>
              <Button size="icon" className="px-9 py-8" onClick={incrementDeathCount}>
                <Plus size={72} />
              </Button>
            </div>
            <Button onClick={playWinTrack} className="text-center mt-6 text-xl">–ü–æ–±–µ–¥–∞ üëë</Button>
          </div>
        ) : (
          <p className="text-lg text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
        )}
      </main>
      <footer className="flex justify-center w-full gap-x-6">
        <Button onClick={stopCurrentTrack}>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É</Button>
        {
          isAudioEnable
          ? <Button onClick={toggleMusicState}>–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –º—É–∑—ã–∫—É</Button>
          : <Button onClick={toggleMusicState}>–†–∞–∑—Ä–µ—à–∏—Ç—å –º—É–∑—ã–∫—É</Button>
        }
      </footer>
    </div>
  );
}
